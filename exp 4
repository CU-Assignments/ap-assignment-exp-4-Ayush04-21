problem 1
class Solution {
public:
    string longestNiceSubstring(string s) {
         int n = s.length();
        if (n < 2) return "";
        unordered_set<char> charSet(s.begin(), s.end()); 
        for (int i = 0; i < n; ++i) {
            if (charSet.count(tolower(s[i])) && charSet.count(toupper(s[i]))) {
                continue; 
            }
            string left = longestNiceSubstring(s.substr(0, i));
            string right = longestNiceSubstring(s.substr(i + 1));
            return (left.size() >= right.size()) ? left : right;
        }
        return s;
    }
};  



problem 2
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
    int maxSum = INT_MIN; 
        int currSum = 0;   
        for (int num : nums) {
            currSum += num;           
            maxSum = max(maxSum, currSum);  
            if (currSum < 0) currSum = 0; 
        }
        
        return maxSum;    
    }
};
